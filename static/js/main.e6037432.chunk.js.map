{"version":3,"sources":["chime.wav","socrates.png","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","children","Button","onClick","App","state","teams","teamName","qLeft","timeLeft","timerIsRunning","intervalId","locked","footerText","handleTeamNameChange","bind","deductQuestion","addQuestion","resetTimer","controlTimer","manipulateTimer","toggleLock","playChime","Audio","chime","play","index","event","setState","target","value","length","push","pop","Math","max","min","this","clearInterval","setInterval","href","id","src","socratesIcon","alt","map","team","type","onChange","style","textAlign","trim","color","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementsByTagName"],"mappings":"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","file":"static/js/main.e6037432.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/chime.2e8dd27a.wav\";","export default __webpack_public_path__ + \"static/media/socrates.0f137ab9.png\";","import { Component } from 'react';\r\nimport chime from './chime.wav';\r\nimport './App.css';\r\nimport socratesIcon from './socrates.png';\r\n\r\nfunction Card(props) {\r\n    return (\r\n        <div className=\"card\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Button(props) {\r\n    return (\r\n        <div onClick={props.onClick} className=\"button\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            teams: [\r\n                {\r\n                    teamName: \"\",\r\n                    qLeft: 20,\r\n                    timeLeft: 45,\r\n                    timerIsRunning: false,\r\n                    intervalId: 0\r\n                }\r\n            ],\r\n            locked: false,\r\n            footerText: \"\"\r\n        }\r\n\r\n        this.handleTeamNameChange = this.handleTeamNameChange.bind(this);\r\n\r\n        this.deductQuestion = this.deductQuestion.bind(this);\r\n\r\n        this.addQuestion = this.addQuestion.bind(this);\r\n\r\n        this.resetTimer = this.resetTimer.bind(this);\r\n\r\n        this.controlTimer = this.controlTimer.bind(this);\r\n\r\n        this.manipulateTimer = this.manipulateTimer.bind(this);\r\n\r\n        this.toggleLock = this.toggleLock.bind(this);\r\n\r\n        this.playChime = () => {\r\n            let track = new Audio(chime);\r\n            track.play();\r\n        }\r\n    }\r\n\r\n    handleTeamNameChange(index) {\r\n        return ((event) => {\r\n            this.setState((state, props) => {\r\n\r\n                let teams = state.teams;\r\n                teams[index].teamName = event.target.value;\r\n\r\n                if (teams[teams.length - 1].teamName.length > 0) {\r\n                    teams.push({ teamName: \"\", qLeft: 20, timeLeft: 45 });\r\n                }\r\n\r\n                while (teams.length > 1 && teams[teams.length - 2].teamName.length === 0) {\r\n                    teams.pop();\r\n                }\r\n\r\n                return {\r\n                    ...state,\r\n                    teams: teams\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    deductQuestion(index) {\r\n        return (() => {\r\n            this.setState(state => {\r\n                let teams = state.teams;\r\n                teams[index].qLeft = Math.max(0, teams[index].qLeft - 1);\r\n                return {\r\n                    ...state,\r\n                    teams: teams\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    addQuestion(index) {\r\n        return (() => {\r\n            this.setState(state => {\r\n                let teams = state.teams;\r\n                teams[index].qLeft = Math.min(20, teams[index].qLeft + 1);\r\n                return {\r\n                    ...state,\r\n                    teams: teams\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    resetTimer(index) {\r\n        this.setState((state, props) => {\r\n            let teams = state.teams;\r\n            teams[index].timeLeft = 45;\r\n            clearInterval(teams[index].intervalId);\r\n            teams[index].timerIsRunning = false;\r\n            return {\r\n                ...state,\r\n                teams: teams\r\n            }\r\n        })\r\n    }\r\n\r\n    controlTimer(index) {\r\n        return setInterval(() => {\r\n            if (this.state.teams[index].timeLeft === 0) {\r\n                this.resetTimer(index);\r\n                this.playChime();\r\n            } else {\r\n                this.setState((state, props) => {\r\n                    let teams = state.teams;\r\n                    teams[index].timeLeft -= 1;\r\n\r\n                    return {\r\n                        ...state,\r\n                        teams: teams\r\n                    }\r\n                })\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n    manipulateTimer(index) {\r\n        return (() => {\r\n            this.setState((state, props) => {\r\n                let teams = state.teams;\r\n\r\n                if (teams[index].timerIsRunning) {\r\n                    clearInterval(teams[index].intervalId);\r\n                    teams[index].timerIsRunning = false;\r\n                } else {\r\n                    teams[index].intervalId = this.controlTimer(index);\r\n                    teams[index].timerIsRunning = true;\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    toggleLock() {\r\n        this.setState((state, props) => {\r\n            return {\r\n                ...state,\r\n                locked: !state.locked\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <main>\r\n                <nav>\r\n                    <a href=\"https://socratesclubvitc.github.io\">\r\n                        <img id=\"logo\" src={socratesIcon} alt=\"logo\" />\r\n                    </a>\r\n                    <h2>Socrates Club VITC</h2>\r\n                </nav>\r\n                <button id=\"lock\" className=\"button\" onClick={this.toggleLock}>Lock</button>\r\n                <section>\r\n                    {\r\n                        !this.state.locked && [...this.state.teams.map(\r\n                            (team, index) => <Card key={index}>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={this.state.teams[index].teamName}\r\n                                    onChange={this.handleTeamNameChange(index)}\r\n                                />\r\n                                <span>{team.qLeft} questions</span>\r\n                                <span>{team.timeLeft + \"s\"}</span>\r\n                            </Card>\r\n                        ), <p key=\"n\" style={{ textAlign: \"center\" }}>Words and stuff here</p>]\r\n                    }\r\n\r\n                    {\r\n                        this.state.locked && [...this.state.teams.map(\r\n                            (team, index) => {\r\n                                if (team.teamName.trim().length > 0)\r\n                                    return (\r\n                                        <Card key={index}>\r\n                                            <span>{team.teamName}</span>\r\n                                            <span className=\"questions\">\r\n                                                {team.qLeft} left\r\n                                                <span className=\"question-buttons\">\r\n                                                    <Button onClick={this.deductQuestion(index)}>-</Button>\r\n                                                    <Button onClick={this.addQuestion(index)}>+</Button>\r\n                                                </span>\r\n                                            </span>\r\n                                            <Button onClick={this.manipulateTimer(index)}>\r\n                                                {team.timeLeft <= 10 && <span style={{ color: \"red\" }}>{team.timeLeft + \"s\"}</span>}\r\n                                                {team.timeLeft > 10 && team.timeLeft + \"s\"}\r\n                                            </Button>\r\n                                            <Button onClick={() => { this.resetTimer(index) }}>Reset</Button>\r\n                                        </Card>\r\n                                    );\r\n                            }\r\n                        ), <p style={{ textAlign: \"center\" }}>Words and stuff here</p>]\r\n                    }\r\n                </section>\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementsByTagName(\"body\")[0]\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}