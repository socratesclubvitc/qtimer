{"version":3,"sources":["chime.wav","socrates.png","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","children","Button","onClick","App","state","teams","teamName","qLeft","timeLeft","timerIsRunning","intervalId","locked","footer","handleTeamNameChange","bind","deductQuestion","addQuestion","resetTimer","controlTimer","manipulateTimer","toggleLock","handleFooterChange","playChime","Audio","chime","play","index","event","setState","target","value","length","push","pop","this","Math","max","min","clearInterval","setInterval","href","id","src","socratesIcon","alt","map","team","type","onChange","question","trim","style","color","textAlign","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementsByTagName"],"mappings":"uPAAe,MAA0B,kCCA1B,G,MAAA,IAA0B,sC,OCKzC,SAASA,EAAKC,GACV,OACI,qBAAKC,UAAU,OAAf,SACKD,EAAME,WAKnB,SAASC,EAAOH,GACZ,OACI,qBAAKI,QAASJ,EAAMI,QAASH,UAAU,SAAvC,SACKD,EAAME,W,IAoNJG,E,kDA9MX,WAAYL,GAAQ,IAAD,8BACf,cAAMA,IACDM,MAAQ,CACTC,MAAO,CACH,CACIC,SAAU,GACVC,MAAO,GACPC,SAAU,GACVC,gBAAgB,EAChBC,WAAY,IAGpBC,QAAQ,EACRC,OAAQ,IAGZ,EAAKC,qBAAuB,EAAKA,qBAAqBC,KAA1B,gBAE5B,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBAEtB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBAEnB,EAAKG,WAAa,EAAKA,WAAWH,KAAhB,gBAElB,EAAKI,aAAe,EAAKA,aAAaJ,KAAlB,gBAEpB,EAAKK,gBAAkB,EAAKA,gBAAgBL,KAArB,gBAEvB,EAAKM,WAAa,EAAKA,WAAWN,KAAhB,gBAElB,EAAKO,mBAAqB,EAAKA,mBAAmBP,KAAxB,gBAE1B,EAAKQ,UAAY,WACD,IAAIC,MAAMC,GAChBC,QAlCK,E,wDAsCnB,SAAqBC,GAAQ,IAAD,OACxB,OAAQ,SAACC,GACL,EAAKC,UAAS,SAACxB,EAAON,GAElB,IAAIO,EAAQD,EAAMC,MAOlB,IANAA,EAAMqB,GAAOpB,SAAWqB,EAAME,OAAOC,MAEjCzB,EAAMA,EAAM0B,OAAS,GAAGzB,SAASyB,OAAS,GAC1C1B,EAAM2B,KAAK,CAAE1B,SAAU,GAAIC,MAAO,GAAIC,SAAU,KAG7CH,EAAM0B,OAAS,GAAiD,IAA5C1B,EAAMA,EAAM0B,OAAS,GAAGzB,SAASyB,QACxD1B,EAAM4B,MAGV,OAAO,2BACA7B,GADP,IAEIC,MAAOA,U,gCAMvB,SAAmBsB,GACfO,KAAKN,UAAS,SAACxB,EAAON,GAAR,mBAAC,eACRM,GADO,IAEVQ,OAAQe,EAAME,OAAOC,a,4BAI7B,SAAeJ,GAAQ,IAAD,OAClB,OAAQ,WACJ,EAAKE,UAAS,SAAAxB,GACV,IAAIC,EAAQD,EAAMC,MAElB,OADAA,EAAMqB,GAAOnB,MAAQ4B,KAAKC,IAAI,EAAG/B,EAAMqB,GAAOnB,MAAQ,GAC/C,2BACAH,GADP,IAEIC,MAAOA,U,yBAMvB,SAAYqB,GAAQ,IAAD,OACf,OAAQ,WACJ,EAAKE,UAAS,SAAAxB,GACV,IAAIC,EAAQD,EAAMC,MAElB,OADAA,EAAMqB,GAAOnB,MAAQ4B,KAAKE,IAAI,GAAIhC,EAAMqB,GAAOnB,MAAQ,GAChD,2BACAH,GADP,IAEIC,MAAOA,U,wBAMvB,SAAWqB,GACPQ,KAAKN,UAAS,SAACxB,EAAON,GAClB,IAAIO,EAAQD,EAAMC,MAIlB,OAHAA,EAAMqB,GAAOlB,SAAW,GACxB8B,cAAcjC,EAAMqB,GAAOhB,YAC3BL,EAAMqB,GAAOjB,gBAAiB,EACvB,2BACAL,GADP,IAEIC,MAAOA,S,0BAKnB,SAAaqB,GAAQ,IAAD,OAChB,OAAOa,aAAY,WAC0B,IAArC,EAAKnC,MAAMC,MAAMqB,GAAOlB,UACxB,EAAKS,WAAWS,GAChB,EAAKJ,aAEL,EAAKM,UAAS,SAACxB,EAAON,GAClB,IAAIO,EAAQD,EAAMC,MAGlB,OAFAA,EAAMqB,GAAOlB,UAAY,EAElB,2BACAJ,GADP,IAEIC,MAAOA,SAIpB,O,6BAGP,SAAgBqB,GAAQ,IAAD,OACnB,OAAQ,WACJ,EAAKE,UAAS,SAACxB,EAAON,GAClB,IAAIO,EAAQD,EAAMC,MAEdA,EAAMqB,GAAOjB,gBACb6B,cAAcjC,EAAMqB,GAAOhB,YAC3BL,EAAMqB,GAAOjB,gBAAiB,IAE9BJ,EAAMqB,GAAOhB,WAAa,EAAKQ,aAAaQ,GAC5CrB,EAAMqB,GAAOjB,gBAAiB,S,wBAM9C,WACIyB,KAAKN,UAAS,SAACxB,EAAON,GAClB,OAAO,2BACAM,GADP,IAEIO,QAASP,EAAMO,c,oBAK3B,WAAU,IAAD,OACL,OACI,iCACI,gCACI,mBAAG6B,KAAK,qCAAR,SACI,qBAAKC,GAAG,OAAOC,IAAKC,EAAcC,IAAI,WAE1C,uDAEJ,wBAAQH,GAAG,OAAO1C,UAAU,SAASG,QAASgC,KAAKd,WAAnD,kBACA,qCAESc,KAAK9B,MAAMO,QAAZ,sBAA0BuB,KAAK9B,MAAMC,MAAMwC,KACvC,SAACC,EAAMpB,GAAP,OAAiB,eAAC7B,EAAD,WACb,uBACIkD,KAAK,OACLjB,MAAO,EAAK1B,MAAMC,MAAMqB,GAAOpB,SAC/B0C,SAAU,EAAKnC,qBAAqBa,KAExC,iCAAOoB,EAAKvC,MAAZ,gBACA,+BAAOuC,EAAKtC,SAAW,QAPCkB,OADhC,CAUG,0BAAkBsB,SAAUd,KAAKb,mBAAjC,SAAsDa,KAAK9B,MAAM6C,UAAnD,OAIjBf,KAAK9B,MAAMO,QAAX,sBAAyBuB,KAAK9B,MAAMC,MAAMwC,KACtC,SAACC,EAAMpB,GACH,GAAIoB,EAAKxC,SAAS4C,OAAOnB,OAAS,EAC9B,OACI,eAAClC,EAAD,WACI,+BAAOiD,EAAKxC,WACZ,uBAAMP,UAAU,YAAhB,UACK+C,EAAKvC,MADV,QAEI,uBAAMR,UAAU,mBAAhB,UACI,cAACE,EAAD,CAAQC,QAAS,EAAKa,eAAeW,GAArC,eACA,cAACzB,EAAD,CAAQC,QAAS,EAAKc,YAAYU,GAAlC,qBAGR,eAACzB,EAAD,CAAQC,QAAS,EAAKiB,gBAAgBO,GAAtC,UACKoB,EAAKtC,UAAY,IAAM,sBAAM2C,MAAO,CAAEC,MAAO,OAAtB,SAAgCN,EAAKtC,SAAW,MACvEsC,EAAKtC,SAAW,IAAMsC,EAAKtC,SAAW,OAE3C,cAACP,EAAD,CAAQC,QAAS,WAAQ,EAAKe,WAAWS,IAAzC,qBAbOA,OAJ3B,CAqBG,mBAAGyB,MAAO,CAAEE,UAAW,UAAvB,SAAoCnB,KAAK9B,MAAMQ,qB,GAvMxD0C,aCTHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,qBAAqB,QAAQ,IAMxCZ,M","file":"static/js/main.0d021795.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/chime.2e8dd27a.wav\";","export default __webpack_public_path__ + \"static/media/socrates.0f137ab9.png\";","import { Component } from 'react';\nimport chime from './chime.wav';\nimport './App.css';\nimport socratesIcon from './socrates.png';\n\nfunction Card(props) {\n    return (\n        <div className=\"card\">\n            {props.children}\n        </div>\n    )\n}\n\nfunction Button(props) {\n    return (\n        <div onClick={props.onClick} className=\"button\">\n            {props.children}\n        </div>\n    )\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            teams: [\n                {\n                    teamName: \"\",\n                    qLeft: 20,\n                    timeLeft: 45,\n                    timerIsRunning: false,\n                    intervalId: 0\n                }\n            ],\n            locked: false,\n            footer: \"\"\n        }\n\n        this.handleTeamNameChange = this.handleTeamNameChange.bind(this);\n\n        this.deductQuestion = this.deductQuestion.bind(this);\n\n        this.addQuestion = this.addQuestion.bind(this);\n\n        this.resetTimer = this.resetTimer.bind(this);\n\n        this.controlTimer = this.controlTimer.bind(this);\n\n        this.manipulateTimer = this.manipulateTimer.bind(this);\n\n        this.toggleLock = this.toggleLock.bind(this);\n\n        this.handleFooterChange = this.handleFooterChange.bind(this);\n\n        this.playChime = () => {\n            let track = new Audio(chime);\n            track.play();\n        }\n    }\n\n    handleTeamNameChange(index) {\n        return ((event) => {\n            this.setState((state, props) => {\n\n                let teams = state.teams;\n                teams[index].teamName = event.target.value;\n\n                if (teams[teams.length - 1].teamName.length > 0) {\n                    teams.push({ teamName: \"\", qLeft: 20, timeLeft: 45 });\n                }\n\n                while (teams.length > 1 && teams[teams.length - 2].teamName.length === 0) {\n                    teams.pop();\n                }\n\n                return {\n                    ...state,\n                    teams: teams\n                }\n            })\n        })\n    }\n\n    handleFooterChange(event) {\n        this.setState((state, props) => ({\n            ...state,\n            footer: event.target.value\n        }))\n    }\n\n    deductQuestion(index) {\n        return (() => {\n            this.setState(state => {\n                let teams = state.teams;\n                teams[index].qLeft = Math.max(0, teams[index].qLeft - 1);\n                return {\n                    ...state,\n                    teams: teams\n                }\n            })\n        })\n    }\n\n    addQuestion(index) {\n        return (() => {\n            this.setState(state => {\n                let teams = state.teams;\n                teams[index].qLeft = Math.min(20, teams[index].qLeft + 1);\n                return {\n                    ...state,\n                    teams: teams\n                }\n            })\n        })\n    }\n\n    resetTimer(index) {\n        this.setState((state, props) => {\n            let teams = state.teams;\n            teams[index].timeLeft = 45;\n            clearInterval(teams[index].intervalId);\n            teams[index].timerIsRunning = false;\n            return {\n                ...state,\n                teams: teams\n            }\n        })\n    }\n\n    controlTimer(index) {\n        return setInterval(() => {\n            if (this.state.teams[index].timeLeft === 0) {\n                this.resetTimer(index);\n                this.playChime();\n            } else {\n                this.setState((state, props) => {\n                    let teams = state.teams;\n                    teams[index].timeLeft -= 1;\n\n                    return {\n                        ...state,\n                        teams: teams\n                    }\n                })\n            }\n        }, 1000);\n    }\n\n    manipulateTimer(index) {\n        return (() => {\n            this.setState((state, props) => {\n                let teams = state.teams;\n\n                if (teams[index].timerIsRunning) {\n                    clearInterval(teams[index].intervalId);\n                    teams[index].timerIsRunning = false;\n                } else {\n                    teams[index].intervalId = this.controlTimer(index);\n                    teams[index].timerIsRunning = true;\n                }\n            })\n        })\n    }\n\n    toggleLock() {\n        this.setState((state, props) => {\n            return {\n                ...state,\n                locked: !state.locked\n            }\n        })\n    }\n\n    render() {\n        return (\n            <main>\n                <nav>\n                    <a href=\"https://socratesclubvitc.github.io\">\n                        <img id=\"logo\" src={socratesIcon} alt=\"logo\" />\n                    </a>\n                    <h2>Socrates Club VITC</h2>\n                </nav>\n                <button id=\"lock\" className=\"button\" onClick={this.toggleLock}>Lock</button>\n                <section>\n                    {\n                        !this.state.locked && [...this.state.teams.map(\n                            (team, index) => <Card key={index}>\n                                <input\n                                    type=\"text\"\n                                    value={this.state.teams[index].teamName}\n                                    onChange={this.handleTeamNameChange(index)}\n                                />\n                                <span>{team.qLeft} questions</span>\n                                <span>{team.timeLeft + \"s\"}</span>\n                            </Card>\n                        ), <textarea key=\"n\" onChange={this.handleFooterChange}>{this.state.question}</textarea>]\n                    }\n\n                    {\n                        this.state.locked && [...this.state.teams.map(\n                            (team, index) => {\n                                if (team.teamName.trim().length > 0)\n                                    return (\n                                        <Card key={index}>\n                                            <span>{team.teamName}</span>\n                                            <span className=\"questions\">\n                                                {team.qLeft} left\n                                                <span className=\"question-buttons\">\n                                                    <Button onClick={this.deductQuestion(index)}>-</Button>\n                                                    <Button onClick={this.addQuestion(index)}>+</Button>\n                                                </span>\n                                            </span>\n                                            <Button onClick={this.manipulateTimer(index)}>\n                                                {team.timeLeft <= 10 && <span style={{ color: \"red\" }}>{team.timeLeft + \"s\"}</span>}\n                                                {team.timeLeft > 10 && team.timeLeft + \"s\"}\n                                            </Button>\n                                            <Button onClick={() => { this.resetTimer(index) }}>Reset</Button>\n                                        </Card>\n                                    );\n                            }\n                        ), <p style={{ textAlign: \"center\" }}>{this.state.footer}</p>]\n                    }\n                </section>\n            </main>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementsByTagName(\"body\")[0]\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}